import systemLoadLine from "@netdata/charts/dist/es6/fixtures/systemLoadLine";


const now = Date.now()
const from = now - 15 * 60 * 1000
const first = 1617946830000
const offset = from - first

//console.log(systemLoadLine[0]);
export const dd = {
    "api":1,
    "id":"system.load",
    "name":"system.load",
    "view_update_every":10,
    "update_every":5,
    "first_entry":1617853010,
    "last_entry":1617947720,
    "before":1617947720,
    "after":1617946825,
    "dimension_names":[
       "load1",
       "load5",
       "load15"
    ],
    "dimension_ids":[
       "load1",
       "load5",
       "load15"
    ],
    "latest_values":[
       1.78,
       2.009,
       1.92
    ],
    "view_latest_values":[
       1.685,
       1.9895,
       1.915
    ],
    "dimensions":3,
    "points":90,
    "format":"json",
    "result":{
       "labels":[
          "time",
          "load1",
          "load5",
          "load15"
       ],
       "data":[
          [
             1665120872234,
             0.405,
             0.83,
             1.57
          ],
          [
             1665120882234,
             0.345,
             0.8,
             1.555
          ],
          [
             1665120892234,
             0.3555464,
             0.7951093,
             1.5448908
          ],
          [
             1665120902234,
             0.39,
             0.785,
             1.53
          ],
          [
             1665120912234,
             0.365,
             0.765,
             1.515
          ],
          [
             1665120922234,
             0.5,
             0.78,
             1.515
          ],
          [
             1665120932234,
             0.54,
             0.78,
             1.505
          ],
          [
             1665120942234,
             0.6213191,
             0.7902199,
             1.50511
          ],
          [
             1665120952234,
             0.82,
             0.83,
             1.505
          ],
          [
             1665120962234,
             0.92,
             0.85,
             1.505
          ],
          [
             1665120972234,
             1.01,
             0.87,
             1.505
          ],
          [
             1665120982234,
             1.1703897,
             0.9101114,
             1.51
          ],
          [
             1665120992234,
             1.255,
             0.94,
             1.51
          ],
          [
             1665121002234,
             1.2,
             0.94,
             1.505
          ],
          [
             1665121012234,
             1.285,
             0.97,
             1.51
          ],
          [
             1665121022234,
             1.2597794,
             0.97,
             1.5048897
          ],
          [
             1665121032234,
             1.28,
             0.99,
             1.5
          ],
          [
             1665121042234,
             1.28,
             0.995,
             1.5
          ],
          [
             1665121052234,
             1.27,
             1,
             1.5
          ],
          [
             1665121062234,
             1.2498875,
             1,
             1.4949438
          ],
          [
             1665121072234,
             1.265,
             1.02,
             1.49
          ],
          [
             1665121082234,
             1.22,
             1.02,
             1.485
          ],
          [
             1665121092234,
             1.265,
             1.03,
             1.485
          ],
          [
             1665121102234,
             1.239781,
             1.03,
             1.48
          ],
          [
             1665121112234,
             1.19,
             1.03,
             1.475
          ],
          [
             1665121122234,
             1.16,
             1.03,
             1.47
          ],
          [
             1665121132234,
             1.135,
             1.03,
             1.46
          ],
          [
             1665121142234,
             1.1207719,
             1.0301102,
             1.46
          ],
          [
             1665121152234,
             1.18,
             1.04,
             1.46
          ],
          [
             1665121162234,
             1.235,
             1.055,
             1.455
          ],
          [
             1665121172234,
             2.335,
             1.3,
             1.53
          ],
          [
             1665121182234,
             3.55,
             1.595,
             1.625
          ],
          [
             1665121192234,
             3.9908785,
             1.740549,
             1.6702196
          ],
          [
             1665121202234,
             4.19,
             1.835,
             1.705
          ],
          [
             1665121212234,
             4.43,
             2.01,
             1.765
          ],
          [
             1665121222234,
             4.285,
             2.06,
             1.785
          ],
          [
             1665121232234,
             3.969142,
             2.05,
             1.78
          ],
          [
             1665121242234,
             3.74,
             2.05,
             1.78
          ],
          [
             1665121252234,
             3.415,
             2.045,
             1.79
          ],
          [
             1665121262234,
             2.96,
             1.9995,
             1.775
          ],
          [
             1665121272234,
             2.66,
             1.97,
             1.77
          ],
          [
             1665121282234,
             2.605331,
             1.9702205,
             1.77
          ],
          [
             1665121292234,
             2.43,
             1.95,
             1.765
          ],
          [
             1665121302234,
             2.335,
             1.955,
             1.77
          ],
          [
             1665121312234,
             2.21,
             1.94,
             1.765
          ],
          [
             1665121322234,
             2.1548895,
             1.93,
             1.7651105
          ],
          [
             1665121332234,
             2.01,
             1.91,
             1.76
          ],
          [
             1665121342234,
             1.855,
             1.88,
             1.75
          ],
          [
             1665121352234,
             1.805,
             1.87,
             1.75
          ],
          [
             1665121362234,
             1.68,
             1.84,
             1.74
          ],
          [
             1665121372234,
             1.7062167,
             1.840221,
             1.7451105
          ],
          [
             1665121382234,
             1.83,
             1.865,
             1.75
          ],
          [
             1665121392234,
             2.43,
             1.995,
             1.795
          ],
          [
             1665121402234,
             2.96,
             2.125,
             1.84
          ],
          [
             1665121412234,
             3.155,
             2.195,
             1.865
          ],
          [
             1665121422234,
             3.289887,
             2.2500565,
             1.89
          ],
          [
             1665121432234,
             3.22,
             2.26,
             1.89
          ],
          [
             1665121442234,
             3.58,
             2.385,
             1.94
          ],
          [
             1665121452234,
             3.415,
             2.395,
             1.945
          ],
          [
             1665121462234,
             3.379564,
             2.405109,
             1.955109
          ],
          [
             1665121472234,
             3.27,
             2.42,
             1.965
          ],
          [
             1665121482234,
             3.07,
             2.41,
             1.965
          ],
          [
             1665121492234,
             3.175,
             2.455,
             1.99
          ],
          [
             1665121502234,
             3.145,
             2.475,
             2
          ],
          [
             1665121512234,
             3.049009,
             2.46989,
             2
          ],
          [
             1665121522234,
             2.925,
             2.455,
             2
          ],
          [
             1665121532234,
             2.75,
             2.435,
             2
          ],
          [
             1665121542234,
             2.47,
             2.385,
             1.99
          ],
          [
             1665121552234,
             2.55,
             2.405,
             2.0045
          ],
          [
             1665121562234,
             2.544267,
             2.409887,
             2.0044495
          ],
          [
             1665121572234,
             2.54,
             2.41,
             2.009
          ],
          [
             1665121582234,
             2.46,
             2.395,
             2.009
          ],
          [
             1665121592234,
             2.255,
             2.355,
             1.9995
          ],
          [
             1665121602234,
             2.25,
             2.35,
             2.0045
          ],
          [
             1665121612234,
             2.0990005,
             2.3196705,
             1.99
          ],
          [
             1665121622234,
             2.009,
             2.29,
             1.99
          ],
          [
             1665121632234,
             1.9,
             2.255,
             1.98
          ],
          [
             1665121642234,
             1.765,
             2.21,
             1.97
          ],
          [
             1665121652234,
             1.7496615,
             2.199887,
             1.9699435
          ],
          [
             1665121662234,
             1.665,
             2.17,
             1.96
          ],
          [
             1665121672234,
             1.585,
             2.13,
             1.95
          ],
          [
             1665121682234,
             1.55,
             2.1,
             1.94
          ],
          [
             1665121692234,
             1.5,
             2.07,
             1.935
          ],
          [
             1665121702234,
             1.4595622,
             2.049781,
             1.93
          ],
          [
             1665121712234,
             1.43,
             2.02,
             1.92
          ],
          [
             1665121722234,
             1.425,
             1.9995,
             1.915
          ],
          [
             1665121732234,
             1.53,
             1.9995,
             1.915
          ],
          [
             1665121742234,
             1.4702258,
             1.97,
             1.91
          ],
          [
             1665121752234,
             1.53,
             1.97,
             1.91
          ],
          [
             1665121762234,
             1.685,
             1.9895,
             1.915
          ]
       ]
    },
    "min":0.345,
    "max":4.43
 };

export function formatData(data, key) {
    //console.log(data, key);
    
    var dataArr = []; 
    var start = true;
    const labels = [];

    let min, max;

    function updateMinMax(d) {
        if (typeof max == 'undefined' || max < d) {
            max = d
        }

        if (typeof min == 'undefined' || min > d) {
            min = d
        } 
    }

    Object.keys(data).sort().forEach((k, i)=> {
      let label = key;
      if (label.toLowerCase() == 'airtemperaturesensor') {
        label = "AirTemp"
      }

      let l = label.split("parsed_data");
      if (l.length > 1) {
        label =  l[1]
      }
      //"2.0/13/10/us/parsed_data/rooms/1/AirTemperatureSensor/1/status/signalInput".split("parsed_data")
      // console.log(data[k][0][0]);
      const first = new Date(data[k][0][0]).getTime()
      const offset = from - first
      //const offset = 0

      labels.push(label+" "+(i+1))
      if (start) {
        dataArr = data[k].map((d) => {
          updateMinMax(d[1]);
          return [new Date(d[0]).getTime() + offset, d[1]]
        })
        start = false; 
      } else {
        data[k].forEach((d, i)=> {
          updateMinMax(d[1]);
          dataArr[i].push(d[1])
        })
      }
    })
    console.log(min, max);

    let newlabels = JSON.parse(JSON.stringify(labels)) // Object.assign(labels, []);
    newlabels.unshift("Date")
    // console.log(newlabels, labels);

    // return dd;

    return {
        dimension_names: labels,
        dimension_ids: labels,
        dimensions: labels.length - 1,
        points: dataArr.length,
        format: "json",
        result: {
            labels: newlabels,
            data: dataArr
        },
        min: min,
        max: max,
    }
  }